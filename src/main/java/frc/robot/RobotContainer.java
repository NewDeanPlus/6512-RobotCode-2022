// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: RobotContainer.

package frc.robot;

import frc.robot.commands.*;
import frc.robot.subsystems.*;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.PowerDistribution.ModuleType;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.PowerDistribution;
import edu.wpi.first.wpilibj.RobotController;

/**
 * This class is where the bulk of the robot should be declared. Since
 * Command-based is a
 * "declarative" paradigm, very little robot logic should actually be handled in
 * the {@link Robot}
 * periodic methods (other than the scheduler calls). Instead, the structure of
 * the robot
 * (including subsystems, commands, and button mappings) should be declared
 * here.
 */
public class RobotContainer {

  private static RobotContainer m_robotContainer = new RobotContainer();

  // DECLARATIONS
  // The robot's subsystems
  public final Intake m_intake = new Intake();
  public final DriveTrain m_driveTrain = new DriveTrain();
  
  //port 0: (player1) Driving
  //port 1: (player2) Functions
  //private final XboxController xboxControllerDrive = new XboxController(0);
  private final XboxController xboxControllerFunct = new XboxController(0);
  private final Joystick driveStick = new Joystick(1);
    //autonomous command set
  private final Command autonomous = new AutonomousCommandGroup(m_driveTrain, m_intake); //CHANGE
  //private final Command limelightAuto = new AutonomousLimelightCommandGroup(m_driveTrain, m_intake);
  private final Command autonomous2balls = new AutonomousCommandGroup2(m_driveTrain, m_intake);
  // Joysticks

  // DECLARATIONS

  // A chooser for autonomous commands
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  /**
   * The container for the robot. Contains subsystems, OI devices, and commands.
   */
  private RobotContainer() {
    // SMARTDASHBOARD
    // Smartdashboard Subsystems
    //SmartDashboard.putData(m_intake);
    //SmartDashboard.putData(m_driveTrain);
    
    // SmartDashboard Buttons
    /*SmartDashboard.putData("Drive", new ArcadeDrive(m_driveTrain));
    SmartDashboard.putData("GrabBall", new GrabBall(m_intake));
    SmartDashboard.putData("ReleaseBall", new ReleaseBall());*/

    // SMARTDASHBOARD
    // Configure the button bindings
    configureButtonBindings();

    // Configure default commands
    // SUBSYSTEM_DEFAULT_COMMAND
    m_driveTrain.setDefaultCommand(new ArcadeDrive(m_driveTrain));

    // SUBSYSTEM_DEFAULT_COMMAND

    // Configure autonomous sendable chooser
    // AUTONOMOUS

    m_chooser.setDefaultOption("Autonomous", autonomous);
    //m_chooser.setDefaultOption("Autonomous", autonomous); //switch to limelightAuto for limelight-driven autonomous
    //m_chooser.setDefaultOption("Autonomous (2 Balls)", autonomous2balls);

      //can set alternative autonomous commands here
    //m_chooser.setDefaultOption("Drive", new ArcadeDrive(m_driveTrain));

    // AUTONOMOUS

    SmartDashboard.putData(m_chooser);
  }

  public static RobotContainer getInstance() {
    return m_robotContainer;
  }

  /**
   * Use this method to define your button->command mappings. Buttons can be
   * created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing
   * it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
    // BUTTONS
    // Create some buttons
    final JoystickButton b1 = new JoystickButton(xboxControllerFunct, 1);
    b1.whenHeld(new GrabBall(m_intake), true);

    final JoystickButton b4 = new JoystickButton(xboxControllerFunct, 3);
    b4.whenHeld(new ReleaseBall(m_intake), true);

    final JoystickButton b2 = new JoystickButton(xboxControllerFunct, 6);
    b2.whenHeld(new winchDown(m_intake), true);

    final JoystickButton b3 = new JoystickButton(xboxControllerFunct, 5);
    b3.whenHeld(new winchUpB(m_intake), true);

    final JoystickButton lLButton = new JoystickButton(xboxControllerFunct, 4);
    lLButton.whenHeld(new LimelightDrive(m_driveTrain), true);

    /*final JoystickButton b5 = new JoystickButton(xboxControllerFunct, 4);
    b5.whenHeld(new LimelightDrive(m_driveTrain),true);*/
    // BUTTONS
  }

  // FUNCTIONS
  /*
   * public Joystick getJoystickl() {
   * return joystickl;
   * }
   * public Joystick getJoystickr(){
   * return joystickr;
   * }
   */
  /*public XboxController getXboxControllerDrive() {
    return xboxControllerDrive;
  }*/
  public XboxController getXboxControllerFunct() {
    return xboxControllerFunct;
  }
  public Joystick getDriveStick(){
    return driveStick;
  }

  // FUNCTIONS

  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    // The selected command will be run in autonomous
    return m_chooser.getSelected();
  }

}
