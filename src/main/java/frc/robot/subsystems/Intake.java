// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkMaxLowLevel.MotorType;
import com.revrobotics.RelativeEncoder;

/**
 *
 */
public class Intake extends SubsystemBase {
    // CONSTANTS

    // CONSTANTS

    // DECLARATIONS
    private CANSparkMax intakeRoller;
    private CANSparkMax winchMotor;
    private RelativeEncoder relativeEncoder;
    // DECLARATIONS

    /**
    *
    */
    public Intake() {
        // CONSTRUCTORS
//intakeLimitSwitch = new DigitalInput(1);
//intakeDownLimitSwitch = new DigitalInput(2);    //make sure to change ports for limit switches
//addChild("IntakeLimitSwitch", intakeLimitSwitch);
 

intakeRoller = new CANSparkMax(6,MotorType.kBrushless);
 //addChild("IntakeC1",intakeC1);
 intakeRoller.setInverted(false);

winchMotor = new CANSparkMax(5,MotorType.kBrushless);
winchMotor.setInverted(true);

//relativeEncoder = winchMotor.getEncoder();

        // CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    public void grab(double grabSpeed) {
        //moves roller in forward position
        intakeRoller.set(grabSpeed); // Speed between -1 and 1
    }

    public void winchDown(double wDownSpeed) {
        //moves arm down (supposedly)
        winchMotor.set(wDownSpeed);
        /*if(wDownSpeed>0){
            if(intakeDownLimitSwitch.get()){
                winchMotor.set(0);
            }else{
                winchMotor.set(wDownSpeed);
            }
        }*/
    }

    public void winchUp/*SmartMotion*/(double winchSpeed) {
        //moves arm up
        winchMotor.set(winchSpeed);
        /*if(winchSpeed>0){
            if(intakeLimitSwitch.get()){
                winchMotor.set(0);
            }else{
                winchMotor.set(winchSpeed);
            }
        }*/
    }

    public void winchUpAlt(double winchSpeed){
        //moves arm up (alternate with experimental formula, might not work correctly)
        winchMotor.set(winchSpeed);
    }

    public void stopGrab() {
        //stops roller (stops grab() and release() commands)
        intakeRoller.set(0);
    }
    //IMPORTANT FOR REFERENCE, returns relativeEncoder for use in command
    public double getEncoder(){
        return relativeEncoder.getPosition();
    }

    public void updateSmartDashboard(){
        //SmartDashboard.putNumber("motor rotations", relativeEncoder.getPosition());
    }

    public void setWinchSpeed(double winchSpeed){
        winchMotor.set(winchSpeed);
    }
    public CANSparkMax getWinchMotor(){
        return winchMotor;
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
