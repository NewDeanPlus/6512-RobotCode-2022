// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;

import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.DriveTrain;
import edu.wpi.first.wpilibj.Timer;
//import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.math.util.Units;
/*import org.photonvision.PhotonCamera;
import org.photonvision.PhotonUtils;*/
//photonvision library install https://maven.photonvision.org/repository/internal/org/photonvision/PhotonLib-json/1.0/PhotonLib-json-1.0.json
//code to aim and find target using photonvision https://docs.photonvision.org/en/latest/docs/examples/aimandrange.html?_sm_byp=iVVt63VjL7N6sPVj

public class PhotonVisionDrive extends CommandBase {
        // VARIABLE_DECLARATIONS
    private final DriveTrain m_driveTrain;
    Timer pVTimer = new Timer();
    double lSpeed, lTurn;
    boolean targetFound;
    boolean finish;
            // Constants such as camera and target height stored. Change per robot and goal!
            final double CAMERA_HEIGHT_METERS = Units.inchesToMeters(6);
            final double TARGET_HEIGHT_METERS = Units.feetToMeters(8);
            // Angle between horizontal and the camera.
            final double CAMERA_PITCH_RADIANS = Units.degreesToRadians(45);

            // How far from the target we want to be
            final double GOAL_RANGE_METERS = Units.feetToMeters(3);

            // Change this to match the name of your camera
    /*      PhotonCamera camera = new PhotonCamera("photonvision");

            // PID constants should be tuned per robot
            final double LINEAR_P = 0.1;
            final double LINEAR_D = 0.0;
            PIDController forwardController = new PIDController(LINEAR_P, 0, LINEAR_D);

            final double ANGULAR_P = 0.1;
            final double ANGULAR_D = 0.0;
            PIDController turnController = new PIDController(ANGULAR_P, 0, ANGULAR_D);      */
        
        //VARIABLE_DECLARATIONS
    // CONSTRUCTORS
    public PhotonVisionDrive(DriveTrain subsystem) {
        // CONSTRUCTORS
        // VARIABLE_SETTING
        // VARIABLE_SETTING
        // REQUIRES
            m_driveTrain = subsystem;
            addRequirements(m_driveTrain);
        // REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        if (finish==true){
            return true;
        }else{
        return false;
        }
    }

    @Override
    public boolean runsWhenDisabled() {
        // DISABLED
        return false;
        // DISABLED
    }
}
