// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;

import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.DriveTrain;
import edu.wpi.first.wpilibj.Timer;

public class AutonomousDrive1 extends CommandBase {
        // VARIABLE_DECLARATIONS
    private final DriveTrain m_driveTrain;
    /*NetworkTable table = NetworkTableInstance.getDefault().getTable("limelight");
    NetworkTableEntry tv = table.getEntry("tv"); //If target found
    NetworkTableEntry tx = table.getEntry("tx"); //Horizontal Offset From Crosshair To Target (-27 degrees to 27 degrees)
    NetworkTableEntry ty = table.getEntry("ty"); //Vertical Offset From Crosshair To Target (-20.5 degrees to 20.5 degrees)
    NetworkTableEntry ta = table.getEntry("ta"); //Target Area (0% of image to 100% of image)
    double adjustSteering;*/
    Timer autoTimer1 = new Timer();
    double speed, turn;
        
        //VARIABLE_DECLARATIONS
    // CONSTRUCTORS
    public AutonomousDrive1(DriveTrain subsystem) {
        // CONSTRUCTORS
        // VARIABLE_SETTING
        // VARIABLE_SETTING
        // REQUIRES
            m_driveTrain = subsystem;
            addRequirements(m_driveTrain);
        // REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        autoTimer1.reset();
        autoTimer1.start();
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        speed=.4;
        turn=0.0;
        
        if(autoTimer1.get() < (4*1.333)){
            m_driveTrain.drive(speed,turn);
        }
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_driveTrain.drive(0.0,0.0);
        
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        if(autoTimer1.get()>4){
            return true;
        }else{
        return false;
        }
    }

    @Override
    public boolean runsWhenDisabled() {
        // DISABLED
        return false;
        // DISABLED
    }
}
