// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: InstantCommand.

package frc.robot.commands;
import frc.robot.subsystems.DriveTrain;
import frc.robot.subsystems.Intake;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;

public class AutonomousCommandGroup2 extends SequentialCommandGroup {
        // VARIABLE_DECLARATIONS
        //private final Intake m_intake;
        // VARIABLE_DECLARATIONS
        // CONSTRUCTORS
    public AutonomousCommandGroup2(DriveTrain m_driveTrain, Intake m_intake) {
        // CONSTRUCTORS
        // VARIABLE_SETTING
        // VARIABLE_SETTING
        // REQUIRES
        // REQUIRES
        addCommands(
            //new AutonomousDrive1(m_driveTrain),
            new AutoWinchDown(m_intake),
            new Drive1_Grab(m_driveTrain, m_intake),//new AutoGrab(m_intake),
            new TurnDegrees(m_driveTrain, 180), //tweak angle if needed, would be about 180 for middle ball, slightly less for left ball, slightly more for right (assuming that front of robot is lined up so that it is facing the ball and aligned with edge of tarmac at the start of each match (with the exception of the middle ball, where right side of robot would be lined up to get the ball and pointed towards ball))
                                        //could offset about 30 (or 29.6) degrees.
            new AutonomousDrive2(m_driveTrain,.4,6) //num 2 is speed, num 3 is seconds
        );
    }

    // Called once when this command runs
    /*@Override
    public void initialize() {
    }

    public void execute(){
    }

    @Override
    public boolean runsWhenDisabled() {
        // DISABLED
        return false;
        // DISABLED
    }
    
    public void end(boolean Interrupted){
    }*/
}
