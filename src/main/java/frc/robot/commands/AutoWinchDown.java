// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: InstantCommand.

package frc.robot.commands;

import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.Intake;

/*import com.revrobotics.CANSparkMax;
import com.revrobotics.RelativeEncoder;*/

import edu.wpi.first.wpilibj.Timer;
//import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;

public class AutoWinchDown extends CommandBase {
        // VARIABLE_DECLARATIONS
        private final Intake m_intake;
        Timer wDTimer = new Timer();
        // VARIABLE_DECLARATIONS
        // CONSTRUCTORS

    public AutoWinchDown(Intake subsystem) {
        // CONSTRUCTORS
        // VARIABLE_SETTING
        // VARIABLE_SETTING
        // REQUIRES
        m_intake = subsystem;
        addRequirements(m_intake);
        // REQUIRES
    }

    // Called once when this command runs
    @Override
    public void initialize() { 
        //PWMSparkMax winchUpMotor=m_intake.getWinchMotor(); //get winchMotor to set Soft Limits
        //RelativeEncoder winchUpEncoder=winchUpMotor.getEncoder();
        //winchUpEncoder.setPosition(0);
        //sets encoder position to 0 at up position
        wDTimer.reset();
        wDTimer.start(); 
    }

    public void execute(){
        if(wDTimer.get()<2){
            m_intake.winchDown(.2);
        }
    }
    @Override
    public boolean runsWhenDisabled() {
        // DISABLED
        return false;
        // DISABLED
    }
    @Override
    public boolean isFinished() {
        if(wDTimer.get()>2){
            return true;
        }else{
            return false;
        }
    }
    
    public void end(boolean Interrupted){
        m_intake.stopGrab();
    }
}
